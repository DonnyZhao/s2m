{
    "docs": [
        {
            "location": "/",
            "text": "s2m\n\n\nBridging\n \nScratch\n \nand\n \nmicro:bit\n\n\n\n\n\n\n\n\nLast Updated: 08 December 2017\n\n\nSo, What is s2m?\n\n\ns2m\n is an \nopen source\n Python program that acts as a bridge between\n the \nScratch 2 off-line editor\n\nand the \nmicro:bit\n computer.\nIt allows you to easily create Scratch programs that interact with the micro:bit.\n\n\nMajor Features\n\n\n\n\ns2m\n is compatible with both Python 2 and Python 3.\n\n\nIt runs on Windows, Mac, Raspberry Pi and Linux.\n\n\nIt is easy to install.\n\n\nIt is easy to use.\n\n\nAnd it is a whole lot of fun!\n\n\n\n\n\n\nWhy The Scratch Off-Line Editor?\n\n\nMany schools have limited or no internet connectivity. Using the off-line editor allows the\nmaximum number of students to have access to \ns2m\n. In addition, using the off-line version means\nthat Raspberry Pi users can also enjoy programming with s2m.\n\n\nWhat Is In This Guide?\n\n\nThis guide will:\n\n\n\n\n\n\nShow you how to install \ns2m\n\n\n\n\n\n\nExplain how to use \ns2m\n\n\n\n\n\n\nProvide a description of the \ns2m\n custom Scratch Blocks\n\n\n\n\n\n\nDiscuss how \ns2m\n works\n\n\n\n\n\n\nWant To See The Source Code?\n\n\nThe full source code is available on \nGithub\n\n\nComments or Questions?\n\n\nIf you have any comments, questions or suggestions, please contact me at:\n\n\nMisterYsLab@gmail.com\n\n\nor enter an issue on \nGithub\n.",
            "title": "The s2m User's Guide"
        },
        {
            "location": "/#so-what-is-s2m",
            "text": "s2m  is an  open source  Python program that acts as a bridge between\n the  Scratch 2 off-line editor \nand the  micro:bit  computer.\nIt allows you to easily create Scratch programs that interact with the micro:bit.",
            "title": "So, What is s2m?"
        },
        {
            "location": "/#major-features",
            "text": "s2m  is compatible with both Python 2 and Python 3.  It runs on Windows, Mac, Raspberry Pi and Linux.  It is easy to install.  It is easy to use.  And it is a whole lot of fun!",
            "title": "Major Features"
        },
        {
            "location": "/#why-the-scratch-off-line-editor",
            "text": "Many schools have limited or no internet connectivity. Using the off-line editor allows the\nmaximum number of students to have access to  s2m . In addition, using the off-line version means\nthat Raspberry Pi users can also enjoy programming with s2m.",
            "title": "Why The Scratch Off-Line Editor?"
        },
        {
            "location": "/#what-is-in-this-guide",
            "text": "This guide will:    Show you how to install  s2m    Explain how to use  s2m    Provide a description of the  s2m  custom Scratch Blocks    Discuss how  s2m  works",
            "title": "What Is In This Guide?"
        },
        {
            "location": "/#want-to-see-the-source-code",
            "text": "The full source code is available on  Github",
            "title": "Want To See The Source Code?"
        },
        {
            "location": "/#comments-or-questions",
            "text": "If you have any comments, questions or suggestions, please contact me at:  MisterYsLab@gmail.com  or enter an issue on  Github .",
            "title": "Comments or Questions?"
        },
        {
            "location": "/install/",
            "text": "Installation\n\n\nThis section will explain how to:\n\n\n\n\nInstall Scratch 2 on your computer\n\n\nInstall Python on your computer\n\n\nInstall the micro:bit mu editor\n\n\nInstall the \ns2m\n script on to the micro:bit using the mu editor\n\n\nInstall the \ns2m\n software on your computer\n\n\n\n\nInstalling the Scratch 2 Off-Line Editor on Your Computer\n\n\nGo to the \nScratch download page\n and follow the instructions\nto install Scratch on your computer.\n\n\nSpecial Note For Raspberry Pi Users\n\n\nIf you are using a Raspberry Pi with the Stretch version of Raspbian installed, Scratch 2 comes\npre-installed, as well as both Python 2 and Python 3, so you may skip to the section on \ninstalling the mu Editor\n.\n\n\n\n\nInstalling Python\n\n\ns2m\n is compatible with Python versions 2 (2.7 or greater) and 3 (3.4 or greater).\nIf you already have Python installed on your computer, you can skip to the next step, \n\nInstalling the mu Editor\n.\n\n\nTo check if you have Python installed, open a command or terminal window and type\n\n\npython\n\n\n\n\nIf Python is already installed, you will see something similar to this:\n\n\n\n\nTo install Python, go to the \nPython web site\n and select \nDownloads\n \nand the appropriate version for your computer.\n\n\n\n\nIf you are installing on Windows, make sure to select both check boxes at the bottom of the \ninstallation dialog box.\n\n\n\n\nInstalling the mu Editor\n\n\nGo to the \nmu editor download page\n and download and install the editor\nfor your system.\n\n\n\n\nInstalling the  \ns2m\n micro:bit Script On The micro:bit\n\n\nPlug your micro:bit into a USB port on your computer. Start the mu editor and then paste this script into the editor.\nYou may also find the script \nhere\n.\nThis is a \"minified\" version of the script.\n\n\nTo see a fully commented version of the script, click on this \nlink\n.\n\n\nfrom microbit import*\ndef loop():\n digital_outputs=[False,False,False]\n while True:\n  data=uart.readline()\n  sleep(8)\n  if data:\n   cmd=str(data,'utf-8').rstrip()\n   if not len(cmd):\n    continue\n   cmd_list=cmd.split(\",\")\n   try:\n    cmd_id=cmd_list[0]\n   except IndexError:\n    cmd_id='z'\n    continue\n   if cmd_id=='d':\n    image_dict={\"HAPPY\":Image.HAPPY,\"SAD\":Image.SAD,\"ANGRY\":Image.ANGRY,\"SMILE\":Image.SMILE,\"CONFUSED\":Image.CONFUSED,\"ASLEEP\":Image.ASLEEP,\"SURPRISED\":Image.SURPRISED,\"SILLY\":Image.SILLY,\"FABULOUS\":Image.FABULOUS,\"MEH\":Image.MEH,\"YES\":Image.YES,\"NO\":Image.NO,\"RABBIT\":Image.RABBIT,\"COW\":Image.COW,\"ROLLERSKATE\":Image.ROLLERSKATE,\"HOUSE\":Image.HOUSE,\"SNAKE\":Image.SNAKE,\"HEART\":Image.HEART,\"DIAMOND\":Image.DIAMOND,\"DIAMOND_SMALL\":Image.DIAMOND_SMALL,\"SQUARE\":Image.SQUARE,\"SQUARE_SMALL\":Image.SQUARE_SMALL,\"TRIANGLE\":Image.TRIANGLE,\"TARGET\":Image.TARGET,\"STICKFIGURE\":Image.STICKFIGURE,\"ARROW_N\":Image.ARROW_N,\"ARROW_NE\":Image.ARROW_NE,\"ARROW_E\":Image.ARROW_E,\"ARROW_SE\":Image.ARROW_SE,\"ARROW_S\":Image.ARROW_S,\"ARROW_SW\":Image.ARROW_SW,\"ARROW_W\":Image.ARROW_W,\"ARROW_NW\":Image.ARROW_NW}\n    try:\n     image_key=cmd_list[1]\n    except IndexError:\n     continue\n    if image_key in image_dict:\n     display.show(image_dict.get(image_key),wait=False)\n   elif cmd_id=='s':\n    display.scroll(str(cmd_list[1]),wait=False)\n   elif cmd_id=='p':\n    try:\n     x=int(cmd_list[1])\n    except ValueError:\n     continue\n    except IndexError:\n     continue\n    if x<0:\n     x=0\n    if x>4:\n     x=4\n    try:\n     y=int(cmd_list[2])\n    except ValueError:\n     continue\n    except IndexError:\n     continue\n    if y<0:\n     y=0\n    if y>4:\n     y=4\n    try:\n     value=int(cmd_list[3])\n    except ValueError:\n     continue\n    except IndexError:\n     continue\n    if value<0:\n     value=0\n    if value>9:\n     value=9\n    display.set_pixel(x,y,value)\n   elif cmd_id=='c':\n    display.clear()\n   elif cmd_id=='a':\n    try:\n     pin=int(cmd_list[1])\n     value=int(cmd_list[2])\n     digital_outputs[pin]=True\n    except IndexError:\n     continue\n    except ValueError:\n     continue\n    if 0<=pin<=2:\n     if not 0<=value<=1023:\n      value=256\n     if pin==0:\n      pin0.write_analog(value)\n     elif pin==1:\n      pin1.write_analog(value)\n     elif pin==2:\n      pin2.write_analog(value)\n   elif cmd_id=='t':\n    try:\n     pin=int(cmd_list[1])\n     value=int(cmd_list[2])\n     digital_outputs[pin]=True\n    except IndexError:\n     continue\n    except ValueError:\n     continue\n    if 0<=pin<=2:\n     if 0<=value<=1:\n      if pin==0:\n       pin0.write_digital(value)\n      elif pin==1:\n       pin1.write_digital(value)\n      elif pin==2:\n       pin2.write_digital(value)\n     else:\n      pass\n   elif cmd=='g':\n    sensor_string=\"\"\n    sensor_string+=str(accelerometer.get_x())+','\n    sensor_string+=str(accelerometer.get_y())+','\n    sensor_string+=str(accelerometer.get_z())+','\n    sensor_string+=str(button_a.is_pressed())+','\n    sensor_string+=str(button_b.is_pressed())+','\n    if not digital_outputs[0]:\n     sensor_string+=str(pin0.read_digital())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[1]:\n     sensor_string+=str(pin1.read_digital())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[2]:\n     sensor_string+=str(pin2.read_digital())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[0]:\n     sensor_string+=str(pin0.read_analog())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[1]:\n     sensor_string+=str(pin1.read_analog())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[2]:\n     sensor_string+=str(pin2.read_analog())\n    else:\n     sensor_string+='0'+','\n    print(sensor_string)\n    sleep(10)\n   elif cmd=='v':\n    print('s2mb.py Version 1.10 14 April 2018')\n   else:\n    continue\n  sleep(8)\nloop()\n\n\n\n\n\n\nFlash the script onto the micro:bit by clicking on the Flash button in the editor.\n\n\n\n\nInstalling \ns2m\n\n\nOpen a command a command window and type:\n\n\npip install s2m\n\n\n\n\nINSTALLATION NOTE FOR RASPBERRY PI, MAC AND LINUX USERS\n\n\nYou may need to use \nsudo\n in conjunction with the version of pip that matches the Python version you\nare using.\n\n\nSo for Python 2, the install command would be:\n\n\nsudo pip install s2m\n\n\n\n\nand for Python 3, the install command would be:\n\n\nsudo pip3 install s2m\n\n\n\n\nThis will download and install the program. \n\n\nNow that all the software has been installed, go to the next section to start using s2m.",
            "title": "Installation"
        },
        {
            "location": "/install/#installation",
            "text": "This section will explain how to:   Install Scratch 2 on your computer  Install Python on your computer  Install the micro:bit mu editor  Install the  s2m  script on to the micro:bit using the mu editor  Install the  s2m  software on your computer",
            "title": "Installation"
        },
        {
            "location": "/install/#installing-the-scratch-2-off-line-editor-on-your-computer",
            "text": "Go to the  Scratch download page  and follow the instructions\nto install Scratch on your computer.",
            "title": "Installing the Scratch 2 Off-Line Editor on Your Computer"
        },
        {
            "location": "/install/#special-note-for-raspberry-pi-users",
            "text": "If you are using a Raspberry Pi with the Stretch version of Raspbian installed, Scratch 2 comes\npre-installed, as well as both Python 2 and Python 3, so you may skip to the section on  installing the mu Editor .",
            "title": "Special Note For Raspberry Pi Users"
        },
        {
            "location": "/install/#installing-python",
            "text": "s2m  is compatible with Python versions 2 (2.7 or greater) and 3 (3.4 or greater).\nIf you already have Python installed on your computer, you can skip to the next step,  Installing the mu Editor .  To check if you have Python installed, open a command or terminal window and type  python  If Python is already installed, you will see something similar to this:   To install Python, go to the  Python web site  and select  Downloads  \nand the appropriate version for your computer.   If you are installing on Windows, make sure to select both check boxes at the bottom of the \ninstallation dialog box.",
            "title": "Installing Python"
        },
        {
            "location": "/install/#installing-the-mu-editor",
            "text": "Go to the  mu editor download page  and download and install the editor\nfor your system.",
            "title": "Installing the mu Editor"
        },
        {
            "location": "/install/#installing-the-s2m-microbit-script-on-the-microbit",
            "text": "Plug your micro:bit into a USB port on your computer. Start the mu editor and then paste this script into the editor.\nYou may also find the script  here .\nThis is a \"minified\" version of the script.  To see a fully commented version of the script, click on this  link .  from microbit import*\ndef loop():\n digital_outputs=[False,False,False]\n while True:\n  data=uart.readline()\n  sleep(8)\n  if data:\n   cmd=str(data,'utf-8').rstrip()\n   if not len(cmd):\n    continue\n   cmd_list=cmd.split(\",\")\n   try:\n    cmd_id=cmd_list[0]\n   except IndexError:\n    cmd_id='z'\n    continue\n   if cmd_id=='d':\n    image_dict={\"HAPPY\":Image.HAPPY,\"SAD\":Image.SAD,\"ANGRY\":Image.ANGRY,\"SMILE\":Image.SMILE,\"CONFUSED\":Image.CONFUSED,\"ASLEEP\":Image.ASLEEP,\"SURPRISED\":Image.SURPRISED,\"SILLY\":Image.SILLY,\"FABULOUS\":Image.FABULOUS,\"MEH\":Image.MEH,\"YES\":Image.YES,\"NO\":Image.NO,\"RABBIT\":Image.RABBIT,\"COW\":Image.COW,\"ROLLERSKATE\":Image.ROLLERSKATE,\"HOUSE\":Image.HOUSE,\"SNAKE\":Image.SNAKE,\"HEART\":Image.HEART,\"DIAMOND\":Image.DIAMOND,\"DIAMOND_SMALL\":Image.DIAMOND_SMALL,\"SQUARE\":Image.SQUARE,\"SQUARE_SMALL\":Image.SQUARE_SMALL,\"TRIANGLE\":Image.TRIANGLE,\"TARGET\":Image.TARGET,\"STICKFIGURE\":Image.STICKFIGURE,\"ARROW_N\":Image.ARROW_N,\"ARROW_NE\":Image.ARROW_NE,\"ARROW_E\":Image.ARROW_E,\"ARROW_SE\":Image.ARROW_SE,\"ARROW_S\":Image.ARROW_S,\"ARROW_SW\":Image.ARROW_SW,\"ARROW_W\":Image.ARROW_W,\"ARROW_NW\":Image.ARROW_NW}\n    try:\n     image_key=cmd_list[1]\n    except IndexError:\n     continue\n    if image_key in image_dict:\n     display.show(image_dict.get(image_key),wait=False)\n   elif cmd_id=='s':\n    display.scroll(str(cmd_list[1]),wait=False)\n   elif cmd_id=='p':\n    try:\n     x=int(cmd_list[1])\n    except ValueError:\n     continue\n    except IndexError:\n     continue\n    if x<0:\n     x=0\n    if x>4:\n     x=4\n    try:\n     y=int(cmd_list[2])\n    except ValueError:\n     continue\n    except IndexError:\n     continue\n    if y<0:\n     y=0\n    if y>4:\n     y=4\n    try:\n     value=int(cmd_list[3])\n    except ValueError:\n     continue\n    except IndexError:\n     continue\n    if value<0:\n     value=0\n    if value>9:\n     value=9\n    display.set_pixel(x,y,value)\n   elif cmd_id=='c':\n    display.clear()\n   elif cmd_id=='a':\n    try:\n     pin=int(cmd_list[1])\n     value=int(cmd_list[2])\n     digital_outputs[pin]=True\n    except IndexError:\n     continue\n    except ValueError:\n     continue\n    if 0<=pin<=2:\n     if not 0<=value<=1023:\n      value=256\n     if pin==0:\n      pin0.write_analog(value)\n     elif pin==1:\n      pin1.write_analog(value)\n     elif pin==2:\n      pin2.write_analog(value)\n   elif cmd_id=='t':\n    try:\n     pin=int(cmd_list[1])\n     value=int(cmd_list[2])\n     digital_outputs[pin]=True\n    except IndexError:\n     continue\n    except ValueError:\n     continue\n    if 0<=pin<=2:\n     if 0<=value<=1:\n      if pin==0:\n       pin0.write_digital(value)\n      elif pin==1:\n       pin1.write_digital(value)\n      elif pin==2:\n       pin2.write_digital(value)\n     else:\n      pass\n   elif cmd=='g':\n    sensor_string=\"\"\n    sensor_string+=str(accelerometer.get_x())+','\n    sensor_string+=str(accelerometer.get_y())+','\n    sensor_string+=str(accelerometer.get_z())+','\n    sensor_string+=str(button_a.is_pressed())+','\n    sensor_string+=str(button_b.is_pressed())+','\n    if not digital_outputs[0]:\n     sensor_string+=str(pin0.read_digital())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[1]:\n     sensor_string+=str(pin1.read_digital())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[2]:\n     sensor_string+=str(pin2.read_digital())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[0]:\n     sensor_string+=str(pin0.read_analog())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[1]:\n     sensor_string+=str(pin1.read_analog())+','\n    else:\n     sensor_string+='0'+','\n    if not digital_outputs[2]:\n     sensor_string+=str(pin2.read_analog())\n    else:\n     sensor_string+='0'+','\n    print(sensor_string)\n    sleep(10)\n   elif cmd=='v':\n    print('s2mb.py Version 1.10 14 April 2018')\n   else:\n    continue\n  sleep(8)\nloop()  Flash the script onto the micro:bit by clicking on the Flash button in the editor.",
            "title": "Installing the  s2m micro:bit Script On The micro:bit"
        },
        {
            "location": "/install/#installing-s2m",
            "text": "Open a command a command window and type:  pip install s2m",
            "title": "Installing s2m"
        },
        {
            "location": "/install/#installation-note-for-raspberry-pi-mac-and-linux-users",
            "text": "You may need to use  sudo  in conjunction with the version of pip that matches the Python version you\nare using.  So for Python 2, the install command would be:  sudo pip install s2m  and for Python 3, the install command would be:  sudo pip3 install s2m  This will download and install the program.   Now that all the software has been installed, go to the next section to start using s2m.",
            "title": "INSTALLATION NOTE FOR RASPBERRY PI, MAC AND LINUX USERS"
        },
        {
            "location": "/usage/",
            "text": "Starting \ns2m\n On Windows, Mac and Linux\n\n\nMake sure that your micro:bit is plugged into a USB port on your computer.\n\n\nNext, open a command or terminal window and type:\n\n\ns2m\n\n\n\n\nTo load a translated set of blocks, use \nthe -l option\n. For example, to load the Japanese blocks,\nenter:\n\n\ns2m -l 1\n\n\n\n\nor use the 2 letter abbreviation for the language:\n\n\ns2m -l ja\n\n\n\n\nSee the \nCommand Line Options section\n for a list of currently available languages.\n\n\nThe command window should display something similar to this:\n\n\n\n\nThe program begins by announcing s2m's version number and thePython version in use.\n\n\nNext, s2m attempts to auto detect the communication port the micro:bit is connected to and announces\nthe port found.\n\n\nIt detects and announces the version of micro:bit script \ns2mb.py\n that was flashed to the micro:bit.\n\n\nIt then launches Scratch and you should select the More Blocks tab to view the s2m blocks. \n\n\nWhen the connectivity indicator on the Scratch editor turns green, the program is ready to be used.\n\n\n\n\nStarting \ns2m\n On The Raspberry Pi\n\n\nOpen a terminal window and type:\n\n\ns2m -r true\n\n\n\n\n\nSee \nthe previous section\n for a description of the console output.\n\n\n\n\nCommand Line Options\n\n\nSome program defaults can be overridden at startup using command line options.\n\n\n\n\nThe \nBASE_PATH\n option allows you to override where s2m looks for its files. The standard\n\n\nBASE_PATH\n is the Python path printed when s2m first starts up.\n\n\nFor example:\n\n\ns2m -b c:\\users\\alan\\appdata\\local\\programs\\python\\python36\\lib\\site-packages/s2m\n\n\n\n\nThe \nCLIENT\n option allows you to manually launch Scratch. This is mainly\nused for debugging. To manually launch Scratch enter:\n\n\ns2m -c no_client\n\n\n\n\nThe \nDISPLAY\n option will print the path to the s2m operational files.\nYou may display the BASE_PATH that is currently in use by entering:\n\n\ns2m -d true\n\n\n\n\n\nOnce displayed, s2m will exit.\n\n\nBy default, s2m launches Scratch with the extension blocks in English. To launch using one of the\nsupported translations, use the \nLANGUAGE\n option. Each translation is assigned a \nlanguage ID number and a 2 letter language abbreviation code used to select the correct language blocks. For example to select the Japanese translation, \nenter:\n\n\ns2m -l 1\n\n\n\n\nor\n\n\ns2m -l ja\n\n\n\n\nThe \nCOMPORT\n option allows you to manually specify which communications port the micro:bit is connected to.\n\n\nFor example, to select COM2, start s2m with:\n\n\ns2m -p COM4\n\n\n\n\n\nThe \nRPI\n option is used when running s2m on a Raspberry Pi. To start s2m on the RPi, type:\n\n\ns2m -r true\n\n\n\n\nThe \nSCRATCH_EXEC\n  option allows you to specify the full path and Scratch executable name if Scratch was not\ninstalled into the standard install directory.\n\n\nFor example:\n\n\ns2m -s C:\\Users\\Alan\\Desktop\\Scratch 2.exe\n\n\n\n\nCreating A Windows Desktop Icon For Quick Start Up\n\n\nIf you would like to create a Windows desktop icon for s2m, open your favorite text editor and enter the\ns2m command  adding any command line options that you might need, and save the file as \ns2m.bat\n in\nthe \nDesktop\n directory. You should then see an s2m.bat icon appear on your desktop.\n\n\nShutting Down\n\n\nBefore shutting down, make sure to save your Scratch project. To shutdown, press \nControl-C\n in the command window.\nThis will close both s2m and Scratch. \n\n\nManually Starting s2m and Scratch\n\n\nManual Start: Step 1\n\n\nDownload the s2m Scratch project file, \ns2m.sb2\n,  by going to the following URL in your Web browser\n\n\nhttps://github.com/MrYsLab/s2m/blob/master/s2m/scratch_files/projects/s2m.sb2\n\n\nClick on \"View Raw\" to download the file\n\n\nManual Start: Step 2\n\n\nStart s2m with the following command:\n\n\ns2m -c no_client\n\n\n\n\nYou should then see something like this on your screen:\n\n\n\n\nManual Start: Step 3\n\n\nNext, start Scratch up manually, then select File/Load from the Scratch menu.\nand load the file you downloaded in step 1.\n\n\nManual Start: Step 4\n\n\nIf you now go to the More Blocks tab in Scratch, you should see micro:bit blocks appear \nin the editor.\n\n\nYou are now ready to start programming.",
            "title": "Using s2m"
        },
        {
            "location": "/usage/#starting-s2m-on-windows-mac-and-linux",
            "text": "Make sure that your micro:bit is plugged into a USB port on your computer.  Next, open a command or terminal window and type:  s2m  To load a translated set of blocks, use  the -l option . For example, to load the Japanese blocks,\nenter:  s2m -l 1  or use the 2 letter abbreviation for the language:  s2m -l ja  See the  Command Line Options section  for a list of currently available languages.  The command window should display something similar to this:   The program begins by announcing s2m's version number and thePython version in use.  Next, s2m attempts to auto detect the communication port the micro:bit is connected to and announces\nthe port found.  It detects and announces the version of micro:bit script  s2mb.py  that was flashed to the micro:bit.  It then launches Scratch and you should select the More Blocks tab to view the s2m blocks.   When the connectivity indicator on the Scratch editor turns green, the program is ready to be used.",
            "title": "Starting s2m On Windows, Mac and Linux"
        },
        {
            "location": "/usage/#starting-s2m-on-the-raspberry-pi",
            "text": "Open a terminal window and type:  s2m -r true  See  the previous section  for a description of the console output.",
            "title": "Starting s2m On The Raspberry Pi"
        },
        {
            "location": "/usage/#command-line-options",
            "text": "Some program defaults can be overridden at startup using command line options.   The  BASE_PATH  option allows you to override where s2m looks for its files. The standard  BASE_PATH  is the Python path printed when s2m first starts up.  For example:  s2m -b c:\\users\\alan\\appdata\\local\\programs\\python\\python36\\lib\\site-packages/s2m  The  CLIENT  option allows you to manually launch Scratch. This is mainly\nused for debugging. To manually launch Scratch enter:  s2m -c no_client  The  DISPLAY  option will print the path to the s2m operational files.\nYou may display the BASE_PATH that is currently in use by entering:  s2m -d true  Once displayed, s2m will exit.  By default, s2m launches Scratch with the extension blocks in English. To launch using one of the\nsupported translations, use the  LANGUAGE  option. Each translation is assigned a \nlanguage ID number and a 2 letter language abbreviation code used to select the correct language blocks. For example to select the Japanese translation, \nenter:  s2m -l 1  or  s2m -l ja  The  COMPORT  option allows you to manually specify which communications port the micro:bit is connected to.  For example, to select COM2, start s2m with:  s2m -p COM4  The  RPI  option is used when running s2m on a Raspberry Pi. To start s2m on the RPi, type:  s2m -r true  The  SCRATCH_EXEC   option allows you to specify the full path and Scratch executable name if Scratch was not\ninstalled into the standard install directory.  For example:  s2m -s C:\\Users\\Alan\\Desktop\\Scratch 2.exe",
            "title": "Command Line Options"
        },
        {
            "location": "/usage/#creating-a-windows-desktop-icon-for-quick-start-up",
            "text": "If you would like to create a Windows desktop icon for s2m, open your favorite text editor and enter the\ns2m command  adding any command line options that you might need, and save the file as  s2m.bat  in\nthe  Desktop  directory. You should then see an s2m.bat icon appear on your desktop.",
            "title": "Creating A Windows Desktop Icon For Quick Start Up"
        },
        {
            "location": "/usage/#shutting-down",
            "text": "Before shutting down, make sure to save your Scratch project. To shutdown, press  Control-C  in the command window.\nThis will close both s2m and Scratch.",
            "title": "Shutting Down"
        },
        {
            "location": "/usage/#manually-starting-s2m-and-scratch",
            "text": "",
            "title": "Manually Starting s2m and Scratch"
        },
        {
            "location": "/usage/#manual-start-step-1",
            "text": "Download the s2m Scratch project file,  s2m.sb2 ,  by going to the following URL in your Web browser  https://github.com/MrYsLab/s2m/blob/master/s2m/scratch_files/projects/s2m.sb2  Click on \"View Raw\" to download the file",
            "title": "Manual Start: Step 1"
        },
        {
            "location": "/usage/#manual-start-step-2",
            "text": "Start s2m with the following command:  s2m -c no_client  You should then see something like this on your screen:",
            "title": "Manual Start: Step 2"
        },
        {
            "location": "/usage/#manual-start-step-3",
            "text": "Next, start Scratch up manually, then select File/Load from the Scratch menu.\nand load the file you downloaded in step 1.",
            "title": "Manual Start: Step 3"
        },
        {
            "location": "/usage/#manual-start-step-4",
            "text": "If you now go to the More Blocks tab in Scratch, you should see micro:bit blocks appear \nin the editor.  You are now ready to start programming.",
            "title": "Manual Start: Step 4"
        },
        {
            "location": "/blocks/",
            "text": "The s2m Blocks\n\n\nThis section describes the custom Scratch blocks added to the More Blocks section\n in the Scratch editor.\n\n\nDisplay\n\n\nThis command block allows you to select and display an image on the micro:bit LED display.\n\n\n\n\nScroll Text\n\n\nThis command block allows you to enter text that will be scrolled across the LED display.\nThe text must be in Roman characters. If not a warning will scroll across the display and\nappear in the command window.\n\n\n\n\nWrite Pixel\n\n\nThis command block allows you to control each individual pixel on the LED display. A pixel is chosen\nby specifying its x or horizontal position, y or vertical position, and its intensity or brightness.\n\n\nAn \nX\n value of 0 is the left most column and a value of 4 is the right most.\n\n\nA \nY\n value of 0 is the top row and a value of 4 is the bottom row.\n\n\nAn intensity (brightness) value of 0 is the lowest level and 9 is the highest.\n\n\nIf you enter a value that is out of range, it will be converted internally to valid value. Please note,\nthat the value will not be updated in the block because Scratch does not provide a programmatic way to do so.\n\n\nIf you enter a negative value for any of the parameters, the value used internally will be a zero.\nIf you enter a value greater than 4 for the x or y parameters, the value  used internally will be a 4.\nIf you enter a value greater than 9 for the intensity parameter, the value  used internally will be a 9.\n\n\n\n\nClear Display\n\n\nThis command block will immediately turn all LED pixels off.\n\n\n\n\nDigital Write\n\n\nThis command block allows you to set pins 0, 1, or 2 to a value of 0 or 1.\n\n\nOnce this block is used to set a digital output value for the selected pin, the pin mode is fixed\nas a digital output. As a result the \nRead Digital\n block for this pin will return a zero, until the\nmicro:bit is reset.\n\n\nIf you wish to follow a digital write by an analog write for a given pin, you should first issue a digital write for the\nselected pin with a value of 0.\n\n\n\n\nAnalog Write\n\n\nThis command block allows you to set pins 0, 1, or 2 to a value of 0 to 1023.\n\n\nOnce this block is used to perform an analog write for the selected pin, the pin mode is fixed\nas an analog output. As a result the \nRead Analog\n block for this pin will return a zero, until the\nmicro:bit is reset.\n\n\nIf you enter a value that is out of range, the value will silently be set to 256 internally.\nPlease note,\nthat the value will not be updated in the block because Scratch does not provide a programmatic way to do so.\n\n\n\n\nButton Pressed\n\n\nThese binary reporter blocks report if their associated button is pressed or not. They return a value\nof \"true\" if pressed and \"false\" if not.\n\n\n\n\nTilt\n\n\nThese binary reporter blocks report if the micro:bit board is tilted in a given direction.\nThey return a value of \"true\" if tilted and \"false\" if not.\n\n\nThe micro:bit is held so that the USB connector is at the top in order for the tilt directions to\ntrack correctly.\n\n\n\n\nShaken\n\n\nThis binary reporter block reports if the micro:bit has been shaken. It returns a value of \"true\" if\nit has been, and \"false\" if not.\n\n\n\n\nMake sure you shake the board up and down so that it changes position vertically (relative to  the ceiling\nand floor).\n\n\nWhen using the \nshaken\n block, you might need to add a small delay for Scratch\nto \"see\" the shaken event.\n\n\n\n\nRead Digital\n\n\nThis reporter block returns the current digital value for pins 0, 1, or 2. Either a value of 0 or\n1 is returned.\n\n\nIf a \nDigital Write\n block was previously used for the pin selected, a zero will always be returned until\nthe micro:bit is reset. Once reset, the pin may then be used as input pin.\n\n\n\n\nRead Analog\n\n\nThis reporter block returns the current analog value for pins 0, 1, or 2. A value between 0 and \n 1024 is returned.\n\n\n\n\nIMPORTANT NOTE: When you press the Red Stop Button in the Scratch Editor, digital and analog outputs for pins 0, 1, and 2 will be set to 0, and the LED display will be cleared.\n\n\nThe Brazilian-Portuguese Blocks\n\n\nThe Brazilian-Portuguese translation was provided by Edson Sidnei Sobreira\n\n\n\n\nThe Japanese Blocks\n\n\nThe Japanese translation was provided by Junya Ishihara.\n\n\n\n\nThe Korean Blocks\n\n\nThe Korean translation was provided by \uc804\ud615\uae30.\n\n\n\n\nThe Spanish Blocks\n\n\nThe Spanish translation was provided by Sergio Gonzalez\n\n\nThe Spanish motion demo were provided by Edson Sidnei Sobreira.\n\n\n\n\n\n\nThe Traditional Chinese (TW) Blocks\n\n\nThe Traditional (tw) Chinese translation and motion demo were provided by HSIEH, Li-Yi (lyshie).",
            "title": "The s2m Blocks"
        },
        {
            "location": "/blocks/#the-s2m-blocks",
            "text": "This section describes the custom Scratch blocks added to the More Blocks section\n in the Scratch editor.",
            "title": "The s2m Blocks"
        },
        {
            "location": "/blocks/#display",
            "text": "This command block allows you to select and display an image on the micro:bit LED display.",
            "title": "Display"
        },
        {
            "location": "/blocks/#scroll-text",
            "text": "This command block allows you to enter text that will be scrolled across the LED display.\nThe text must be in Roman characters. If not a warning will scroll across the display and\nappear in the command window.",
            "title": "Scroll Text"
        },
        {
            "location": "/blocks/#write-pixel",
            "text": "This command block allows you to control each individual pixel on the LED display. A pixel is chosen\nby specifying its x or horizontal position, y or vertical position, and its intensity or brightness.  An  X  value of 0 is the left most column and a value of 4 is the right most.  A  Y  value of 0 is the top row and a value of 4 is the bottom row.  An intensity (brightness) value of 0 is the lowest level and 9 is the highest.  If you enter a value that is out of range, it will be converted internally to valid value. Please note,\nthat the value will not be updated in the block because Scratch does not provide a programmatic way to do so.  If you enter a negative value for any of the parameters, the value used internally will be a zero.\nIf you enter a value greater than 4 for the x or y parameters, the value  used internally will be a 4.\nIf you enter a value greater than 9 for the intensity parameter, the value  used internally will be a 9.",
            "title": "Write Pixel"
        },
        {
            "location": "/blocks/#clear-display",
            "text": "This command block will immediately turn all LED pixels off.",
            "title": "Clear Display"
        },
        {
            "location": "/blocks/#digital-write",
            "text": "This command block allows you to set pins 0, 1, or 2 to a value of 0 or 1.  Once this block is used to set a digital output value for the selected pin, the pin mode is fixed\nas a digital output. As a result the  Read Digital  block for this pin will return a zero, until the\nmicro:bit is reset.  If you wish to follow a digital write by an analog write for a given pin, you should first issue a digital write for the\nselected pin with a value of 0.",
            "title": "Digital Write"
        },
        {
            "location": "/blocks/#analog-write",
            "text": "This command block allows you to set pins 0, 1, or 2 to a value of 0 to 1023.  Once this block is used to perform an analog write for the selected pin, the pin mode is fixed\nas an analog output. As a result the  Read Analog  block for this pin will return a zero, until the\nmicro:bit is reset.  If you enter a value that is out of range, the value will silently be set to 256 internally.\nPlease note,\nthat the value will not be updated in the block because Scratch does not provide a programmatic way to do so.",
            "title": "Analog Write"
        },
        {
            "location": "/blocks/#button-pressed",
            "text": "These binary reporter blocks report if their associated button is pressed or not. They return a value\nof \"true\" if pressed and \"false\" if not.",
            "title": "Button Pressed"
        },
        {
            "location": "/blocks/#tilt",
            "text": "These binary reporter blocks report if the micro:bit board is tilted in a given direction.\nThey return a value of \"true\" if tilted and \"false\" if not.  The micro:bit is held so that the USB connector is at the top in order for the tilt directions to\ntrack correctly.",
            "title": "Tilt"
        },
        {
            "location": "/blocks/#shaken",
            "text": "This binary reporter block reports if the micro:bit has been shaken. It returns a value of \"true\" if\nit has been, and \"false\" if not.   Make sure you shake the board up and down so that it changes position vertically (relative to  the ceiling\nand floor).  When using the  shaken  block, you might need to add a small delay for Scratch\nto \"see\" the shaken event.",
            "title": "Shaken"
        },
        {
            "location": "/blocks/#read-digital",
            "text": "This reporter block returns the current digital value for pins 0, 1, or 2. Either a value of 0 or\n1 is returned.  If a  Digital Write  block was previously used for the pin selected, a zero will always be returned until\nthe micro:bit is reset. Once reset, the pin may then be used as input pin.",
            "title": "Read Digital"
        },
        {
            "location": "/blocks/#read-analog",
            "text": "This reporter block returns the current analog value for pins 0, 1, or 2. A value between 0 and \n 1024 is returned.",
            "title": "Read Analog"
        },
        {
            "location": "/blocks/#important-note-when-you-press-the-red-stop-button-in-the-scratch-editor-digital-and-analog-outputs-for-pins-0-1-and-2-will-be-set-to-0-and-the-led-display-will-be-cleared",
            "text": "",
            "title": "IMPORTANT NOTE: When you press the Red Stop Button in the Scratch Editor, digital and analog outputs for pins 0, 1, and 2 will be set to 0, and the LED display will be cleared."
        },
        {
            "location": "/blocks/#the-brazilian-portuguese-blocks",
            "text": "",
            "title": "The Brazilian-Portuguese Blocks"
        },
        {
            "location": "/blocks/#the-brazilian-portuguese-translation-was-provided-by-edson-sidnei-sobreira",
            "text": "",
            "title": "The Brazilian-Portuguese translation was provided by Edson Sidnei Sobreira"
        },
        {
            "location": "/blocks/#the-japanese-blocks",
            "text": "",
            "title": "The Japanese Blocks"
        },
        {
            "location": "/blocks/#the-japanese-translation-was-provided-by-junya-ishihara",
            "text": "",
            "title": "The Japanese translation was provided by Junya Ishihara."
        },
        {
            "location": "/blocks/#the-korean-blocks",
            "text": "",
            "title": "The Korean Blocks"
        },
        {
            "location": "/blocks/#the-korean-translation-was-provided-by",
            "text": "",
            "title": "The Korean translation was provided by \uc804\ud615\uae30."
        },
        {
            "location": "/blocks/#the-spanish-blocks",
            "text": "",
            "title": "The Spanish Blocks"
        },
        {
            "location": "/blocks/#the-spanish-translation-was-provided-by-sergio-gonzalez",
            "text": "",
            "title": "The Spanish translation was provided by Sergio Gonzalez"
        },
        {
            "location": "/blocks/#the-spanish-motion-demo-were-provided-by-edson-sidnei-sobreira",
            "text": "",
            "title": "The Spanish motion demo were provided by Edson Sidnei Sobreira."
        },
        {
            "location": "/blocks/#the-traditional-chinese-tw-blocks",
            "text": "",
            "title": "The Traditional Chinese (TW) Blocks"
        },
        {
            "location": "/blocks/#the-traditional-tw-chinese-translation-and-motion-demo-were-provided-by-hsieh-li-yi-lyshie",
            "text": "",
            "title": "The Traditional (tw) Chinese translation and motion demo were provided by HSIEH, Li-Yi (lyshie)."
        },
        {
            "location": "/translation/",
            "text": "Translating The s2m Blocks\n\n\nThe section will explain how to translate the custom blocks to a language other than English.\n\n\nIf you create a translation, and would like me to include it as part of s2m's distribution, please\nsend me your tested .s2e Scratch extension specification file.\n\n\nYou will be given full credit for the translation and your name will appear in this User's Guide\n\n\nLet's Get Started\n\n\nYou should always use the Github .s2e file for the basis of your translation, since it will be the latest file\navailable. That file may be found on Github \nhere\n.\n\n\nThe Scratch extension specification is a \nJSON\n formatted file.\n\n\nFor detailed information on the Scratch specification, you may refer to the \nExtension Specification\n.\n\n\nWhen making changes to this file, do it in very small steps and then check your work by\nloading the changes into Scratch. If there are any errors introduced into the file, Scratch\nwill not provide any error messages, and when you go to view the blocks in the More Blocks section,\nnothing will appear.\n\n\nLuckily, you can check for syntax errors by running the file through the \nJSON Validator\n.\n\n\nLoading A Block Specification File Into Scratch\n\n\nBefore we describe the contents of the file, let's learn how to install the .s2e file into Scratch\nto create the custom extension blocks.\n\n\nAfter downloading s2m.s2e as described in the \nsection above\n,\nopen the Scratch editor. You do not have to have s2m running to load and view the blocks\nin Scratch.\n\n\nWhile holding the Shift button on your keyboard and click on the File menu in the upper\nleft hand corner of the Scratch editor. The drop down list should have \"Import experimental\nHTTP extension\" as the last item in the menu. Select this item and choose your copy of s2m.s2e.\n\n\n\n\nIf you then go to the More Blocks section, you should see the s2m blocks appear.\n\n\n\n\nThe connection indicator should be red. This is normal when s2m is not connected to Scratch.\n\n\nEach time you make a change to this file, you will be reloading the file to your check\nyour work.\n\n\nUnderstanding The Block Specification File\n\n\n     1  {\n     2      \"extensionName\": \"s2m\",\n     3      \"extensionPort\": 50209,\n     4      \"url\": \"https://mryslab.github.io/s2m/\",\n     5      \"blockSpecs\": [\n     6          [\n     7              \" \",\n     8              \"Display %m.images\",\n     9              \"display_image\",\n    10              \"HAPPY\"\n    11          ],\n    12          [\n    13              \" \",\n    14              \"Scroll %s\",\n    15              \"scroll\",\n    16              \"Hello!\"\n    17          ],\n    18          [\n    19              \" \",\n    20              \"Write Pixel X %n Y %n Intensity %n\",\n    21              \"write_pixel\",\n    22              \"0\",\n    23              \"0\",\n    24              \"9\"\n    25          ],\n    26          [\n    27              \" \",\n    28              \"Clear Display\",\n    29              \"display_clear\"\n    30          ],\n    31          [\n    32              \" \",\n    33              \"Digital Write Pin %m.pins Value %m.val\",\n    34              \"digital_write\",\n    35              \"0\",\n    36              \"0\"\n    37          ],\n    38          [\n    39              \" \",\n    40              \"Analog Write Pin %m.pins Value %n\",\n    41              \"analog_write\",\n    42              \"0\",\n    43              \"0\"\n    44          ],\n    45          [\n    46              \"b\",\n    47              \"Button A pressed?\",\n    48              \"button_a_pressed\"\n    49          ],\n    50          [\n    51              \"b\",\n    52              \"Button B pressed?\",\n    53              \"button_b_pressed\"\n    54          ],\n    55          [\n    56              \"b\",\n    57              \"Tilted right?\",\n    58              \"tilted_right\"\n    59          ],\n    60          [\n    61              \"b\",\n    62              \"Tilted left?\",\n    63              \"tilted_left\"\n    64          ],\n    65          [\n    66              \"b\",\n    67              \"Tilted up?\",\n    68              \"tilted_up\"\n    69          ],\n    70          [\n    71              \"b\",\n    72              \"Tilted down?\",\n    73              \"tilted_down\"\n    74          ],\n    75          [\n    76              \"b\",\n    77              \"Shaken?\",\n    78              \"shaken\"\n    79          ],\n    80          [\n    81              \"r\",\n    82              \"Digital Read Pin %m.pins\",\n    83              \"digital_read\",\n    84              \"0\"\n    85          ],\n    86          [\n    87              \"r\",\n    88              \"Analog Read Pin %m.pins\",\n    89              \"analog_read\",\n    90              \"0\"\n    91          ]\n    92      ],\n    93      \"menus\": {\n    94      \"images\": [\n    95              \"HAPPY\",\n    96              \"SAD\",\n    97              \"ANGRY\",\n    98              \"SMILE\",\n    99              \"HEART\",\n   100              \"CONFUSED\",\n   101              \"ASLEEP\",\n   102              \"SURPRISED\",\n   103              \"SILLY\",\n   104              \"FABULOUS\",\n   105              \"MEH\",\n   106              \"YES\",\n   107              \"NO\",\n   108              \"TRIANGLE\",\n   109              \"DIAMOND\",\n   110              \"DIAMOND_SMALL\",\n   111              \"SQUARE\",\n   112              \"SQUARE_SMALL\",\n   113              \"TARGET\",\n   114              \"STICKFIGURE\",\n   115              \"RABBIT\",\n   116              \"COW\",\n   117              \"ROLLERSKATE\",\n   118              \"HOUSE\",\n   119              \"SNAKE\",\n   120              \"ARROW_N\",\n   121              \"ARROW_NE\",\n   122              \"ARROW_E\",\n   123              \"ARROW_SE\",\n   124              \"ARROW_S\",\n   125              \"ARROW_SW\",\n   126              \"ARROW_W\",\n   127              \"ARROW_NW\"\n   128          ],\n   129          \"pins\": [\n   130              \"0\",\n   131              \"1\",\n   132              \"2\"\n   133          ],\n   134          \"val\": [\n   135              \"0\",\n   136              \"1\"\n   137          ] \n   138      }\n   139  }\n\n\n\n\nThe file is comprised of three major sections:\n\n\nThe Specification Header\n\n\nLines 1-4 contain the header. In general you should not modify this section. The one item you can modify, if you\nwish, is the extension name shown on line 2. The extension name will appear in the More Blocks\nsection of Scratch to the left of the connection indicator. For example, if you wish to change\ns2m to s2m_Italiano you would modify line 2 to look like \n\n\n\"extensionName\": \"s2m_Italiano\",\n\n\n\n\nThe Block Descriptors\n\n\nLines 5-92 describe the type of block (rectangular command block, round reporter block, etc.), any parameters\nthe block contains, a block identifier string, and a set of default values for the parameters. \n\n\nThis is the descriptor for the Display image block.\n\n\n     6          [\n     7              \" \",\n     8              \"Display %m.images\",\n     9              \"display_image\",\n    10              \"HAPPY\"\n    11          ],\n\n\n\n\nThe Menu Descriptors\n\n\nSee \nthis section\n for a discussion of menu descriptors and\n\nthis section \n for a discussion on providing translations for them.\n\n\nFirst Line Of The Descriptor\n\n\nThe first line of every descriptor describes the shape and function of the block we wish to use.\n\n\n\n\n\n\n\n\nSymbol\n\n\nBlock Type\n\n\nBlock Shape\n\n\n\n\n\n\n\n\n\n\n\" \"\n\n\nCommand\n\n\nRectangular\n\n\n\n\n\n\n\"b\"\n\n\nBoolean Reporter\n\n\nPointy\n\n\n\n\n\n\n\"r\"\n\n\nReporter\n\n\nRound\n\n\n\n\n\n\n\n\nThis line should not be changed!!\n\n\nSecond Line Of The Descriptor\n\n\nThis line contains the text and parameters for the block.\n\n\n\n\n\n\n\n\nParameter Symbol\n\n\nParameter Type\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n%m.NAME_OF_MENU\n\n\nMenu (Drop Down List)\n\n\nUse the NAME_OF_MENU to see the choices.\n\n\n\n\n\n\n%s\n\n\nString\n\n\n\n\n\n\n\n\n%n\n\n\nNumeric\n\n\n\n\n\n\n\n\n\n\nFor the \nDisplay images block\n, the menu is named \nimages\n.\n\n\nThe \nimages\n menu is defined at the bottom of the file at lines 94-130.\n\n\nLines 8, 20, 33 40, 82 and 88 all contain \"menu\" parameters.\n\n\nLine 33, contains multiple menu parameters:\n\n\n    33              \"Digital Write Pin %m.pins Value %m.val\",\n\n\n\n\nLine 14 contains a single string parameter, and line 40 contains a single numeric parameter.\n\n\nModifying The Second Line Of The Block Descriptor\n\n\nIn this line, you may change the English to the language of your choice. \nIn addition, you may reorder the parameters in the block.\n\nYou may not change the parameter type.\n\n\nThe Third Line Of The Descriptor\n\n\nThis is the value that Scratch uses as an identification for the block when the block is executed.\n\n\nDo not modify this line.\n It is used internally by s2m.\n\n\nThe Fourth and Following Lines For A Given Descriptor\n\n\nThe entries in this line and for any following line, is the initial value shown for each parameter.\n\n\nLet's look at the Write Pixel block as an example\n\n\n    18          [\n    19              \" \",\n    20              \"Write Pixel X %n Y %n Intensity %n\",\n    21              \"write_pixel\",\n    22              \"0\",\n    23              \"0\",\n    24              \"9\"\n    25          ],\n\n\n\n\nLines 22, 23, and 24 contain the initial of zero for the row, zero for the column and 9 for the intensity.\n\n\nDo not change any of the numeric initial values for any of the blocks.\n\n\nYou may however, modify line 16 to be any string you wish, as long as its in Roman characters. It is suggested\nto stay with default of \"Hello!\"\n\n\nTranslating The Menu Descriptors\n\n\nOnly the strings in lines 95 - 128 can be modified. All other menus should not be modified.\nFor the names of the images, you will need to append a 2 digit number followed by an underbar to the\ntranslated name of each shape.\n\n\nFor example, if you wanted to translate \"HAPPY\" on line 95 to Italian, you would change it to \n\"01_Contento\". The next item in the menu would start with \"02_\". Each item's 2 digit number is 1 greater than\nthe one preceding it. Also line 10, would needs to be translated to \"01_Contento\" as well, to set the initial\nvalue within the block.\n\n\nIn Summary\n\n\nTo provide a translation:\n\n\n\n\nTranslate the text contained in the second line of each block descriptor. \n\n\nOrder the parameters to meet the grammatical needs of your language.\n\n\nIf you wish to translate the image names, remember to precede each translation with a 2 digit \nsequential number followed by an underbar and then the image name. Finally, set the initial value in the \ndisplay image block to be the same as that of the first entry in the image menu.",
            "title": "Translating The s2m Blocks To A Language Other Than English"
        },
        {
            "location": "/translation/#translating-the-s2m-blocks",
            "text": "The section will explain how to translate the custom blocks to a language other than English.  If you create a translation, and would like me to include it as part of s2m's distribution, please\nsend me your tested .s2e Scratch extension specification file.  You will be given full credit for the translation and your name will appear in this User's Guide",
            "title": "Translating The s2m Blocks"
        },
        {
            "location": "/translation/#lets-get-started",
            "text": "You should always use the Github .s2e file for the basis of your translation, since it will be the latest file\navailable. That file may be found on Github  here .  The Scratch extension specification is a  JSON  formatted file.  For detailed information on the Scratch specification, you may refer to the  Extension Specification .  When making changes to this file, do it in very small steps and then check your work by\nloading the changes into Scratch. If there are any errors introduced into the file, Scratch\nwill not provide any error messages, and when you go to view the blocks in the More Blocks section,\nnothing will appear.  Luckily, you can check for syntax errors by running the file through the  JSON Validator .",
            "title": "Let's Get Started"
        },
        {
            "location": "/translation/#loading-a-block-specification-file-into-scratch",
            "text": "Before we describe the contents of the file, let's learn how to install the .s2e file into Scratch\nto create the custom extension blocks.  After downloading s2m.s2e as described in the  section above ,\nopen the Scratch editor. You do not have to have s2m running to load and view the blocks\nin Scratch.  While holding the Shift button on your keyboard and click on the File menu in the upper\nleft hand corner of the Scratch editor. The drop down list should have \"Import experimental\nHTTP extension\" as the last item in the menu. Select this item and choose your copy of s2m.s2e.   If you then go to the More Blocks section, you should see the s2m blocks appear.   The connection indicator should be red. This is normal when s2m is not connected to Scratch.  Each time you make a change to this file, you will be reloading the file to your check\nyour work.",
            "title": "Loading A Block Specification File Into Scratch"
        },
        {
            "location": "/translation/#understanding-the-block-specification-file",
            "text": "1  {\n     2      \"extensionName\": \"s2m\",\n     3      \"extensionPort\": 50209,\n     4      \"url\": \"https://mryslab.github.io/s2m/\",\n     5      \"blockSpecs\": [\n     6          [\n     7              \" \",\n     8              \"Display %m.images\",\n     9              \"display_image\",\n    10              \"HAPPY\"\n    11          ],\n    12          [\n    13              \" \",\n    14              \"Scroll %s\",\n    15              \"scroll\",\n    16              \"Hello!\"\n    17          ],\n    18          [\n    19              \" \",\n    20              \"Write Pixel X %n Y %n Intensity %n\",\n    21              \"write_pixel\",\n    22              \"0\",\n    23              \"0\",\n    24              \"9\"\n    25          ],\n    26          [\n    27              \" \",\n    28              \"Clear Display\",\n    29              \"display_clear\"\n    30          ],\n    31          [\n    32              \" \",\n    33              \"Digital Write Pin %m.pins Value %m.val\",\n    34              \"digital_write\",\n    35              \"0\",\n    36              \"0\"\n    37          ],\n    38          [\n    39              \" \",\n    40              \"Analog Write Pin %m.pins Value %n\",\n    41              \"analog_write\",\n    42              \"0\",\n    43              \"0\"\n    44          ],\n    45          [\n    46              \"b\",\n    47              \"Button A pressed?\",\n    48              \"button_a_pressed\"\n    49          ],\n    50          [\n    51              \"b\",\n    52              \"Button B pressed?\",\n    53              \"button_b_pressed\"\n    54          ],\n    55          [\n    56              \"b\",\n    57              \"Tilted right?\",\n    58              \"tilted_right\"\n    59          ],\n    60          [\n    61              \"b\",\n    62              \"Tilted left?\",\n    63              \"tilted_left\"\n    64          ],\n    65          [\n    66              \"b\",\n    67              \"Tilted up?\",\n    68              \"tilted_up\"\n    69          ],\n    70          [\n    71              \"b\",\n    72              \"Tilted down?\",\n    73              \"tilted_down\"\n    74          ],\n    75          [\n    76              \"b\",\n    77              \"Shaken?\",\n    78              \"shaken\"\n    79          ],\n    80          [\n    81              \"r\",\n    82              \"Digital Read Pin %m.pins\",\n    83              \"digital_read\",\n    84              \"0\"\n    85          ],\n    86          [\n    87              \"r\",\n    88              \"Analog Read Pin %m.pins\",\n    89              \"analog_read\",\n    90              \"0\"\n    91          ]\n    92      ],\n    93      \"menus\": {\n    94      \"images\": [\n    95              \"HAPPY\",\n    96              \"SAD\",\n    97              \"ANGRY\",\n    98              \"SMILE\",\n    99              \"HEART\",\n   100              \"CONFUSED\",\n   101              \"ASLEEP\",\n   102              \"SURPRISED\",\n   103              \"SILLY\",\n   104              \"FABULOUS\",\n   105              \"MEH\",\n   106              \"YES\",\n   107              \"NO\",\n   108              \"TRIANGLE\",\n   109              \"DIAMOND\",\n   110              \"DIAMOND_SMALL\",\n   111              \"SQUARE\",\n   112              \"SQUARE_SMALL\",\n   113              \"TARGET\",\n   114              \"STICKFIGURE\",\n   115              \"RABBIT\",\n   116              \"COW\",\n   117              \"ROLLERSKATE\",\n   118              \"HOUSE\",\n   119              \"SNAKE\",\n   120              \"ARROW_N\",\n   121              \"ARROW_NE\",\n   122              \"ARROW_E\",\n   123              \"ARROW_SE\",\n   124              \"ARROW_S\",\n   125              \"ARROW_SW\",\n   126              \"ARROW_W\",\n   127              \"ARROW_NW\"\n   128          ],\n   129          \"pins\": [\n   130              \"0\",\n   131              \"1\",\n   132              \"2\"\n   133          ],\n   134          \"val\": [\n   135              \"0\",\n   136              \"1\"\n   137          ] \n   138      }\n   139  }  The file is comprised of three major sections:",
            "title": "Understanding The Block Specification File"
        },
        {
            "location": "/translation/#the-specification-header",
            "text": "Lines 1-4 contain the header. In general you should not modify this section. The one item you can modify, if you\nwish, is the extension name shown on line 2. The extension name will appear in the More Blocks\nsection of Scratch to the left of the connection indicator. For example, if you wish to change\ns2m to s2m_Italiano you would modify line 2 to look like   \"extensionName\": \"s2m_Italiano\",",
            "title": "The Specification Header"
        },
        {
            "location": "/translation/#the-block-descriptors",
            "text": "Lines 5-92 describe the type of block (rectangular command block, round reporter block, etc.), any parameters\nthe block contains, a block identifier string, and a set of default values for the parameters.   This is the descriptor for the Display image block.       6          [\n     7              \" \",\n     8              \"Display %m.images\",\n     9              \"display_image\",\n    10              \"HAPPY\"\n    11          ],",
            "title": "The Block Descriptors"
        },
        {
            "location": "/translation/#the-menu-descriptors",
            "text": "See  this section  for a discussion of menu descriptors and this section   for a discussion on providing translations for them.",
            "title": "The Menu Descriptors"
        },
        {
            "location": "/translation/#first-line-of-the-descriptor",
            "text": "The first line of every descriptor describes the shape and function of the block we wish to use.     Symbol  Block Type  Block Shape      \" \"  Command  Rectangular    \"b\"  Boolean Reporter  Pointy    \"r\"  Reporter  Round     This line should not be changed!!",
            "title": "First Line Of The Descriptor"
        },
        {
            "location": "/translation/#second-line-of-the-descriptor",
            "text": "This line contains the text and parameters for the block.     Parameter Symbol  Parameter Type  Note      %m.NAME_OF_MENU  Menu (Drop Down List)  Use the NAME_OF_MENU to see the choices.    %s  String     %n  Numeric      For the  Display images block , the menu is named  images .  The  images  menu is defined at the bottom of the file at lines 94-130.  Lines 8, 20, 33 40, 82 and 88 all contain \"menu\" parameters.  Line 33, contains multiple menu parameters:      33              \"Digital Write Pin %m.pins Value %m.val\",  Line 14 contains a single string parameter, and line 40 contains a single numeric parameter.",
            "title": "Second Line Of The Descriptor"
        },
        {
            "location": "/translation/#modifying-the-second-line-of-the-block-descriptor",
            "text": "In this line, you may change the English to the language of your choice. \nIn addition, you may reorder the parameters in the block. You may not change the parameter type.",
            "title": "Modifying The Second Line Of The Block Descriptor"
        },
        {
            "location": "/translation/#the-third-line-of-the-descriptor",
            "text": "This is the value that Scratch uses as an identification for the block when the block is executed.  Do not modify this line.  It is used internally by s2m.",
            "title": "The Third Line Of The Descriptor"
        },
        {
            "location": "/translation/#the-fourth-and-following-lines-for-a-given-descriptor",
            "text": "The entries in this line and for any following line, is the initial value shown for each parameter.  Let's look at the Write Pixel block as an example      18          [\n    19              \" \",\n    20              \"Write Pixel X %n Y %n Intensity %n\",\n    21              \"write_pixel\",\n    22              \"0\",\n    23              \"0\",\n    24              \"9\"\n    25          ],  Lines 22, 23, and 24 contain the initial of zero for the row, zero for the column and 9 for the intensity.  Do not change any of the numeric initial values for any of the blocks.  You may however, modify line 16 to be any string you wish, as long as its in Roman characters. It is suggested\nto stay with default of \"Hello!\"",
            "title": "The Fourth and Following Lines For A Given Descriptor"
        },
        {
            "location": "/translation/#translating-the-menu-descriptors",
            "text": "Only the strings in lines 95 - 128 can be modified. All other menus should not be modified.\nFor the names of the images, you will need to append a 2 digit number followed by an underbar to the\ntranslated name of each shape.  For example, if you wanted to translate \"HAPPY\" on line 95 to Italian, you would change it to \n\"01_Contento\". The next item in the menu would start with \"02_\". Each item's 2 digit number is 1 greater than\nthe one preceding it. Also line 10, would needs to be translated to \"01_Contento\" as well, to set the initial\nvalue within the block.",
            "title": "Translating The Menu Descriptors"
        },
        {
            "location": "/translation/#in-summary",
            "text": "To provide a translation:   Translate the text contained in the second line of each block descriptor.   Order the parameters to meet the grammatical needs of your language.  If you wish to translate the image names, remember to precede each translation with a 2 digit \nsequential number followed by an underbar and then the image name. Finally, set the initial value in the \ndisplay image block to be the same as that of the first entry in the image menu.",
            "title": "In Summary"
        },
        {
            "location": "/s2m/",
            "text": "The \ns2m\n Architecture\n\n\n\n\ns2m consists of 3 major components:\n\n\nAn HTTP Server\n\n\nWhen a Scratch command block is executed, Scratch generates an HTTP message that is\nsent to the \ns2m\n HTTP server. The message identifies the block type and provides any\ndata that the user may have entered into the block's fields. Reporting block\ninformation is formatted by \ns2m\n into HTTP messages and are sent to Scratch and made\navailable to the user.\n\n\nA copy of the Scratch 2.0 HTTP Extension specification is available \nhere\n.\n\n\nProtocol Translator\n\n\nThe micro:bit does not understand HTTP, so the Scratch HTTP messaging must be translated into data\nthat the micro:bit can understand and process. When the micro:bit wants to send reporter data,\nsuch as button presses, it does so using the protocol described by the Python code that was installed\non micro:bit that supports s2m. This protocol then needs to be translated into HTTP messages so that\nScratch can process the data coming from the micro:bit.\n\n\nThe Serial Interface\n\n\ns2m\n communicates with the micro:bit over its serial interface. The s2m serial interface\nwrites data directly to the micro:bit and reads data from the micro:bit.",
            "title": "How s2m Works"
        },
        {
            "location": "/s2m/#the-s2m-architecture",
            "text": "",
            "title": "The s2m Architecture"
        },
        {
            "location": "/s2m/#s2m-consists-of-3-major-components",
            "text": "",
            "title": "s2m consists of 3 major components:"
        },
        {
            "location": "/s2m/#an-http-server",
            "text": "When a Scratch command block is executed, Scratch generates an HTTP message that is\nsent to the  s2m  HTTP server. The message identifies the block type and provides any\ndata that the user may have entered into the block's fields. Reporting block\ninformation is formatted by  s2m  into HTTP messages and are sent to Scratch and made\navailable to the user.  A copy of the Scratch 2.0 HTTP Extension specification is available  here .",
            "title": "An HTTP Server"
        },
        {
            "location": "/s2m/#protocol-translator",
            "text": "The micro:bit does not understand HTTP, so the Scratch HTTP messaging must be translated into data\nthat the micro:bit can understand and process. When the micro:bit wants to send reporter data,\nsuch as button presses, it does so using the protocol described by the Python code that was installed\non micro:bit that supports s2m. This protocol then needs to be translated into HTTP messages so that\nScratch can process the data coming from the micro:bit.",
            "title": "Protocol Translator"
        },
        {
            "location": "/s2m/#the-serial-interface",
            "text": "s2m  communicates with the micro:bit over its serial interface. The s2m serial interface\nwrites data directly to the micro:bit and reads data from the micro:bit.",
            "title": "The Serial Interface"
        }
    ]
}