{
    "docs": [
        {
            "location": "/",
            "text": "s2m\n\n\nBridging\n \nScratch\n \nand\n \nmicro:bit\n\n\n\n\n\n\n\n\nSo, What is s2m?\n\n\ns2m\n is an \nopen source\n Python program that acts as a bridge between\n the \nScratch 2 off-line editor\n\nand the \nmicro:bit\n computer.\nIt allows you to easily create Scratch programs that interact with the micro:bit.\n\n\nMajor Features\n\n\n\n\ns2m\n is compatible with both Python 2 and Python 3.\n\n\nIt runs on Windows, Mac, Raspberry Pi and Linux.\n\n\nIt is easy to install.\n\n\nIt is easy to use.\n\n\nAnd it is a whole lot of fun!\n\n\n\n\n\n\nWhy The Scratch Off-Line Editor?\n\n\nMany schools have limited or no internet connectivity. Using the off-line editor allows the\nmaximum number of students to have access to \ns2m\n. In addition, using the off-line version means\nthat Raspberry Pi users can also enjoy programming with s2m.\n\n\nWhat Is In This Guide?\n\n\nThis guide will:\n\n\n\n\n\n\nShow you how to install \ns2m\n\n\n\n\n\n\nExplain how to use \ns2m\n\n\n\n\n\n\nProvide a description of the \ns2m\n custom Scratch Blocks\n\n\n\n\n\n\nDiscuss how \ns2m\n works\n\n\n\n\n\n\nWant To See The Source Code?\n\n\nThe full source code is available on \nGithub\n\n\nComments or Questions?\n\n\nIf you have any comments, questions or suggestions, please contact me at:\n\n\nMisterYsLab@gmail.com",
            "title": "The s2m User's Guide"
        },
        {
            "location": "/#so-what-is-s2m",
            "text": "s2m  is an  open source  Python program that acts as a bridge between\n the  Scratch 2 off-line editor \nand the  micro:bit  computer.\nIt allows you to easily create Scratch programs that interact with the micro:bit.",
            "title": "So, What is s2m?"
        },
        {
            "location": "/#major-features",
            "text": "s2m  is compatible with both Python 2 and Python 3.  It runs on Windows, Mac, Raspberry Pi and Linux.  It is easy to install.  It is easy to use.  And it is a whole lot of fun!",
            "title": "Major Features"
        },
        {
            "location": "/#why-the-scratch-off-line-editor",
            "text": "Many schools have limited or no internet connectivity. Using the off-line editor allows the\nmaximum number of students to have access to  s2m . In addition, using the off-line version means\nthat Raspberry Pi users can also enjoy programming with s2m.",
            "title": "Why The Scratch Off-Line Editor?"
        },
        {
            "location": "/#what-is-in-this-guide",
            "text": "This guide will:    Show you how to install  s2m    Explain how to use  s2m    Provide a description of the  s2m  custom Scratch Blocks    Discuss how  s2m  works",
            "title": "What Is In This Guide?"
        },
        {
            "location": "/#want-to-see-the-source-code",
            "text": "The full source code is available on  Github",
            "title": "Want To See The Source Code?"
        },
        {
            "location": "/#comments-or-questions",
            "text": "If you have any comments, questions or suggestions, please contact me at:  MisterYsLab@gmail.com",
            "title": "Comments or Questions?"
        },
        {
            "location": "/install/",
            "text": "Installation\n\n\nThis section will explain how to:\n\n\n\n\nInstall Scratch 2 on your computer\n\n\nInstall Python on your computer\n\n\nInstall the micro:bit mu editor\n\n\nInstall the \ns2m\n script on to the micro:bit using the mu editor\n\n\nInstall the \ns2m\n software on your computer\n\n\n\n\nInstalling the Scratch 2 Off-Line Editor on Your Computer\n\n\nGo to the \nScratch download page\n and follow the instructions\nto install Scratch on your computer.\n\n\nSpecial Note For Raspberry Pi Users\n\n\nIf you are using a Raspberry Pi with the Stretch version of Raspbian installed, Scratch 2 comes\npre-installed, as well as both Python 2 and Python 3, so you may skip to the section on \ninstalling the mu Editor\n.\n\n\n\n\nInstalling Python\n\n\ns2m\n is compatible with Python versions 2 (2.7 or greater) and 3 (3.4 or greater).\nIf you already have Python installed on your computer, you can skip to the next step, \n\nInstalling the mu Editor\n.\n\n\nTo check if you have Python installed, open a command or terminal window and type\n\n\npython\n\n\n\n\nIf Python is already installed, you will see something similar to this:\n\n\n\n\nTo install Python, go to the \nPython web site\n and select \nDownloads\n \nand the appropriate version for your computer.\n\n\n\n\nIf you are installing on Windows, make sure to select both check boxes at the bottom of the \ninstallation dialog box.\n\n\n\n\nInstalling the mu Editor\n\n\nGo to the \nmu editor download page\n and download and install the editor\nfor your system.\n\n\n\n\nInstalling the  \ns2m\n micro:bit Script On The micro:bit\n\n\nPlug your micro:bit into a USB port on your computer. Start the mu editor and then paste this script into the editor.\nYou may also find the script \nhere\n.\n\n\n\"\"\"\n Copyright (c) 2017 Alan Yorinks All rights reserved.\n\n This program is free software; you can redistribute it and/or\n modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n Version 3 as published by the Free Software Foundation; either\n or (at your option) any later version.\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.\n\n You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE\n along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Last modified 21 November 2017\n\"\"\"\n\nfrom microbit import *\n\n# This is a script used to control a micro:bit from s2m\n\n# This loop continuously polls the sensors and then prints a reply string.\n# It also continuously calls readline to check for commands.\n# A command is specified as comma delimited string with the command\n# as the first element followed by its parameters.\n\n# Commands:\n#   d - display the specified image\n#   s - scroll the specified text\n#   p - control a pixel for the specified row, column and intensity\n#   c - clear the display (no parameters)\n#   a - analog write for the specified pin and value (range 0-1023)\n#   t - digital write for the specified pin and value (0 or 1)\n\nwhile True:\n    data = uart.readline()\n    sleep(50)\n    if data:\n        cmd = str(data, 'utf-8').rstrip()\n        if not len(cmd):\n            continue\n        # noinspection PyUnresolvedReferences\n        cmd_list = cmd.split(\",\")\n        # get command id\n\n        try:\n            cmd_id = cmd_list[0]\n        except IndexError:\n            cmd_id = 'z'\n            continue\n\n        # display image command\n        if cmd_id == 'd':\n            image_dict = {\"HAPPY\": Image.HAPPY,\n                          \"SAD\": Image.SAD,\n                          \"ANGRY\": Image.ANGRY,\n                          \"SMILE\": Image.SMILE,\n                          \"CONFUSED\": Image.CONFUSED,\n                          \"ASLEEP\": Image.ASLEEP,\n                          \"SURPRISED\": Image.SURPRISED,\n                          \"SILLY\": Image.SILLY,\n                          \"FABULOUS\": Image.FABULOUS,\n                          \"MEH\": Image.MEH,\n                          \"YES\": Image.YES,\n                          \"NO\": Image.NO,\n                          \"RABBIT\": Image.RABBIT,\n                          \"COW\": Image.COW,\n                          \"ROLLERSKATE\": Image.ROLLERSKATE,\n                          \"HOUSE\": Image.HOUSE,\n                          \"SNAKE\": Image.SNAKE,\n                          \"HEART\": Image.HEART,\n                          \"DIAMOND\": Image.DIAMOND,\n                          \"DIAMOND_SMALL\": Image.DIAMOND_SMALL,\n                          \"SQUARE\": Image.SQUARE,\n                          \"SQUARE_SMALL\": Image.SQUARE_SMALL,\n                          \"TRIANGLE\": Image.TRIANGLE,\n                          \"TARGET\": Image.TARGET,\n                          \"STICKFIGURE\": Image.STICKFIGURE,\n                          \"ARROW_N\": Image.ARROW_N,\n                          \"ARROW_NE\": Image.ARROW_NE,\n                          \"ARROW_E\": Image.ARROW_E,\n                          \"ARROW_SE\": Image.ARROW_SE,\n                          \"ARROW_S\": Image.ARROW_S,\n                          \"ARROW_SW\": Image.ARROW_SW,\n                          \"ARROW_W\": Image.ARROW_W,\n                          \"ARROW_NW\": Image.ARROW_NW}\n\n            # get image key\n            # try:\n            image_key = cmd_list[1]\n            # except IndexError:\n            #     continue\n            if image_key in image_dict:\n                display.show(image_dict.get(image_key), wait=False)\n\n            # sleep(50)\n\n        # scroll text command\n        if cmd_id == 's':\n            display.scroll(cmd_list[1], wait=False)\n\n        # write pixel command\n        if cmd_id == 'p':\n            # get row, column and intensity value\n            # make sure values are within valid range\n            # print(cmd)\n            try:\n                x = int(cmd_list[1])\n            except ValueError:\n                continue\n            except IndexError:\n                continue\n\n            if x < 0:\n                x = 0\n            if x > 4:\n                x = 4\n\n            try:\n                y = int(cmd_list[2])\n            except ValueError:\n                continue\n            except IndexError:\n                continue\n\n            if y < 0:\n                y = 0\n            if y > 4:\n                y = 4\n            try:\n                value = int(cmd_list[3])\n            except ValueError:\n                continue\n            except IndexError:\n                continue\n\n            if value < 0:\n                value = 0\n            if value > 9:\n                value = 9\n            display.set_pixel(x, y, value)\n\n\n        # clear display command\n        if cmd_id == 'c':\n            display.clear()\n\n        # analog write command\n        # if values are out of range, command is ignored\n        if cmd_id == 'a':\n            # check pin and value ranges\n            try:\n                pin = int(cmd_list[1])\n                value = int(cmd_list[2])\n            except IndexError:\n                continue\n            except ValueError:\n                continue\n\n            if 0 <= pin < 2:\n                if 0 <= value < 1024:\n                    if pin == 0:\n                        pin0.write_analog(value)\n                    elif pin == 1:\n                        pin1.write_analog(value)\n                    elif pin == 2:\n                        pin2.write_analog(value)\n                    else:\n                        pass\n\n\n        # digital write command\n        if cmd_id == 't':\n            # check pin and value ranges\n            # if values are out of range, command is ignored\n\n            try:\n                pin = int(cmd_list[1])\n                value = int(cmd_list[2])\n            except IndexError:\n                continue\n            except ValueError:\n                continue\n\n            if 0 <= pin < 2:\n                if 0 <= value < 3:\n                    if pin == 0:\n                        pin0.write_digital(value)\n                    elif pin == 1:\n                        pin1.write_digital(value)\n                    elif pin == 2:\n                        pin2.write_digital(value)\n                else:\n                    pass\n\n\n\n\n        if cmd == 'g':\n            # This string will contain the sensor values and will\n            # be \"printed\" to the serial port.\n            # Fields are comma delimited\n            sensor_string = \"\"\n\n            # accelerometer\n            sensor_string += str(accelerometer.get_x()) + ','\n            sensor_string += str(accelerometer.get_y()) + ','\n            sensor_string += str(accelerometer.get_z()) + ','\n\n            # buttons\n            sensor_string += str(button_a.is_pressed()) + ','\n\n            sensor_string += str(button_b.is_pressed()) + ','\n\n            # get digital input pin values\n            sensor_string += str(pin0.read_digital()) + ','\n\n            sensor_string += str(pin1.read_digital()) + ','\n\n            sensor_string += str(pin2.read_digital()) + ','\n\n            # get analog input pin values\n            sensor_string += str(pin0.read_analog()) + ','\n\n            sensor_string += str(pin1.read_analog()) + ','\n\n            sensor_string += str(pin2.read_analog())\n\n            print(sensor_string)\n\n\n\n\n\n\nFlash the script onto the micro:bit by clicking on the Flash button in the editor.\n\n\n\n\nInstalling \ns2m\n\n\nOpen a command a command window and type:\n\n\npip install s2m\n\n\n\n\nThis will download and install the program. \n\n\nNow that all the software has been installed, go to the next section to start using s2m.",
            "title": "Installation"
        },
        {
            "location": "/install/#installation",
            "text": "This section will explain how to:   Install Scratch 2 on your computer  Install Python on your computer  Install the micro:bit mu editor  Install the  s2m  script on to the micro:bit using the mu editor  Install the  s2m  software on your computer",
            "title": "Installation"
        },
        {
            "location": "/install/#installing-the-scratch-2-off-line-editor-on-your-computer",
            "text": "Go to the  Scratch download page  and follow the instructions\nto install Scratch on your computer.",
            "title": "Installing the Scratch 2 Off-Line Editor on Your Computer"
        },
        {
            "location": "/install/#special-note-for-raspberry-pi-users",
            "text": "If you are using a Raspberry Pi with the Stretch version of Raspbian installed, Scratch 2 comes\npre-installed, as well as both Python 2 and Python 3, so you may skip to the section on  installing the mu Editor .",
            "title": "Special Note For Raspberry Pi Users"
        },
        {
            "location": "/install/#installing-python",
            "text": "s2m  is compatible with Python versions 2 (2.7 or greater) and 3 (3.4 or greater).\nIf you already have Python installed on your computer, you can skip to the next step,  Installing the mu Editor .  To check if you have Python installed, open a command or terminal window and type  python  If Python is already installed, you will see something similar to this:   To install Python, go to the  Python web site  and select  Downloads  \nand the appropriate version for your computer.   If you are installing on Windows, make sure to select both check boxes at the bottom of the \ninstallation dialog box.",
            "title": "Installing Python"
        },
        {
            "location": "/install/#installing-the-mu-editor",
            "text": "Go to the  mu editor download page  and download and install the editor\nfor your system.",
            "title": "Installing the mu Editor"
        },
        {
            "location": "/install/#installing-the-s2m-microbit-script-on-the-microbit",
            "text": "Plug your micro:bit into a USB port on your computer. Start the mu editor and then paste this script into the editor.\nYou may also find the script  here .  \"\"\"\n Copyright (c) 2017 Alan Yorinks All rights reserved.\n\n This program is free software; you can redistribute it and/or\n modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n Version 3 as published by the Free Software Foundation; either\n or (at your option) any later version.\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n General Public License for more details.\n\n You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE\n along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n Last modified 21 November 2017\n\"\"\"\n\nfrom microbit import *\n\n# This is a script used to control a micro:bit from s2m\n\n# This loop continuously polls the sensors and then prints a reply string.\n# It also continuously calls readline to check for commands.\n# A command is specified as comma delimited string with the command\n# as the first element followed by its parameters.\n\n# Commands:\n#   d - display the specified image\n#   s - scroll the specified text\n#   p - control a pixel for the specified row, column and intensity\n#   c - clear the display (no parameters)\n#   a - analog write for the specified pin and value (range 0-1023)\n#   t - digital write for the specified pin and value (0 or 1)\n\nwhile True:\n    data = uart.readline()\n    sleep(50)\n    if data:\n        cmd = str(data, 'utf-8').rstrip()\n        if not len(cmd):\n            continue\n        # noinspection PyUnresolvedReferences\n        cmd_list = cmd.split(\",\")\n        # get command id\n\n        try:\n            cmd_id = cmd_list[0]\n        except IndexError:\n            cmd_id = 'z'\n            continue\n\n        # display image command\n        if cmd_id == 'd':\n            image_dict = {\"HAPPY\": Image.HAPPY,\n                          \"SAD\": Image.SAD,\n                          \"ANGRY\": Image.ANGRY,\n                          \"SMILE\": Image.SMILE,\n                          \"CONFUSED\": Image.CONFUSED,\n                          \"ASLEEP\": Image.ASLEEP,\n                          \"SURPRISED\": Image.SURPRISED,\n                          \"SILLY\": Image.SILLY,\n                          \"FABULOUS\": Image.FABULOUS,\n                          \"MEH\": Image.MEH,\n                          \"YES\": Image.YES,\n                          \"NO\": Image.NO,\n                          \"RABBIT\": Image.RABBIT,\n                          \"COW\": Image.COW,\n                          \"ROLLERSKATE\": Image.ROLLERSKATE,\n                          \"HOUSE\": Image.HOUSE,\n                          \"SNAKE\": Image.SNAKE,\n                          \"HEART\": Image.HEART,\n                          \"DIAMOND\": Image.DIAMOND,\n                          \"DIAMOND_SMALL\": Image.DIAMOND_SMALL,\n                          \"SQUARE\": Image.SQUARE,\n                          \"SQUARE_SMALL\": Image.SQUARE_SMALL,\n                          \"TRIANGLE\": Image.TRIANGLE,\n                          \"TARGET\": Image.TARGET,\n                          \"STICKFIGURE\": Image.STICKFIGURE,\n                          \"ARROW_N\": Image.ARROW_N,\n                          \"ARROW_NE\": Image.ARROW_NE,\n                          \"ARROW_E\": Image.ARROW_E,\n                          \"ARROW_SE\": Image.ARROW_SE,\n                          \"ARROW_S\": Image.ARROW_S,\n                          \"ARROW_SW\": Image.ARROW_SW,\n                          \"ARROW_W\": Image.ARROW_W,\n                          \"ARROW_NW\": Image.ARROW_NW}\n\n            # get image key\n            # try:\n            image_key = cmd_list[1]\n            # except IndexError:\n            #     continue\n            if image_key in image_dict:\n                display.show(image_dict.get(image_key), wait=False)\n\n            # sleep(50)\n\n        # scroll text command\n        if cmd_id == 's':\n            display.scroll(cmd_list[1], wait=False)\n\n        # write pixel command\n        if cmd_id == 'p':\n            # get row, column and intensity value\n            # make sure values are within valid range\n            # print(cmd)\n            try:\n                x = int(cmd_list[1])\n            except ValueError:\n                continue\n            except IndexError:\n                continue\n\n            if x < 0:\n                x = 0\n            if x > 4:\n                x = 4\n\n            try:\n                y = int(cmd_list[2])\n            except ValueError:\n                continue\n            except IndexError:\n                continue\n\n            if y < 0:\n                y = 0\n            if y > 4:\n                y = 4\n            try:\n                value = int(cmd_list[3])\n            except ValueError:\n                continue\n            except IndexError:\n                continue\n\n            if value < 0:\n                value = 0\n            if value > 9:\n                value = 9\n            display.set_pixel(x, y, value)\n\n\n        # clear display command\n        if cmd_id == 'c':\n            display.clear()\n\n        # analog write command\n        # if values are out of range, command is ignored\n        if cmd_id == 'a':\n            # check pin and value ranges\n            try:\n                pin = int(cmd_list[1])\n                value = int(cmd_list[2])\n            except IndexError:\n                continue\n            except ValueError:\n                continue\n\n            if 0 <= pin < 2:\n                if 0 <= value < 1024:\n                    if pin == 0:\n                        pin0.write_analog(value)\n                    elif pin == 1:\n                        pin1.write_analog(value)\n                    elif pin == 2:\n                        pin2.write_analog(value)\n                    else:\n                        pass\n\n\n        # digital write command\n        if cmd_id == 't':\n            # check pin and value ranges\n            # if values are out of range, command is ignored\n\n            try:\n                pin = int(cmd_list[1])\n                value = int(cmd_list[2])\n            except IndexError:\n                continue\n            except ValueError:\n                continue\n\n            if 0 <= pin < 2:\n                if 0 <= value < 3:\n                    if pin == 0:\n                        pin0.write_digital(value)\n                    elif pin == 1:\n                        pin1.write_digital(value)\n                    elif pin == 2:\n                        pin2.write_digital(value)\n                else:\n                    pass\n\n\n\n\n        if cmd == 'g':\n            # This string will contain the sensor values and will\n            # be \"printed\" to the serial port.\n            # Fields are comma delimited\n            sensor_string = \"\"\n\n            # accelerometer\n            sensor_string += str(accelerometer.get_x()) + ','\n            sensor_string += str(accelerometer.get_y()) + ','\n            sensor_string += str(accelerometer.get_z()) + ','\n\n            # buttons\n            sensor_string += str(button_a.is_pressed()) + ','\n\n            sensor_string += str(button_b.is_pressed()) + ','\n\n            # get digital input pin values\n            sensor_string += str(pin0.read_digital()) + ','\n\n            sensor_string += str(pin1.read_digital()) + ','\n\n            sensor_string += str(pin2.read_digital()) + ','\n\n            # get analog input pin values\n            sensor_string += str(pin0.read_analog()) + ','\n\n            sensor_string += str(pin1.read_analog()) + ','\n\n            sensor_string += str(pin2.read_analog())\n\n            print(sensor_string)  Flash the script onto the micro:bit by clicking on the Flash button in the editor.",
            "title": "Installing the  s2m micro:bit Script On The micro:bit"
        },
        {
            "location": "/install/#installing-s2m",
            "text": "Open a command a command window and type:  pip install s2m  This will download and install the program.   Now that all the software has been installed, go to the next section to start using s2m.",
            "title": "Installing s2m"
        },
        {
            "location": "/usage/",
            "text": "Starting \ns2m\n On Windows, Mac and Linux\n\n\nMake sure that your micro:bit is plugged into a USB port on your computer.\n\n\nNext, open a command or terminal window and type:\n\n\ns2m\n\n\n\n\nThe command window should display something similar to this:\n\n\n\n\nThe program begins by announcing s2m's version number and thePython version in use.\n\n\nNext, s2m attempts to auto detect the communication port the micro:bit is connected to and announces\nthe port found.\n\n\nIt then launches Scratch and you should select the More Blocks tab to view the s2m blocks. \n\n\nWhen the connectivity indicator on the Scratch editor turns green, the program is ready to be used.\n\n\n\n\nStarting \ns2m\n On The Raspberry Pi\n\n\nOpen a terminal window and type:\n\n\ns2m -r true\n\n\n\n\n\nSee \nthe previous section\n for a description of the console output.\n\n\n\n\nCommand Line Options\n\n\nSome program defaults can be overriden at startup using command line options.\n\n\n\n\nThe \nBASE_PATH\n allows you to override where s2m looks for its files. The standard\n\n\nBASE_PATH\n is the Python path printed when s2m first starts up.\n\n\nYou may also display the BASE_PATH that is currently in use. If you select\n\n\ns2m -d true\n\n\n\n\nthe \nBASE_PATH\n is shown and then s2m exits.\n\n\nIf the \nCLIENT\n is set to no_client, Scratch will not automatically launch. This is mainly\nused for debugging.\n\n\nCOMPOR\nT allows you to manually specify which communications port the micro:bit is connected to.\n\n\nSpecial Note For Raspberry Pi Users\n\n\nYou must set the -r option to \"true\" to allow s2m to lauch correctly. See the\n \nprevious section\n.\n\n\nSCRATCH_EXEC\n allows you to specify the full path and Scratch executable name if Scratch was not\ninstalled into the standard directory.\n\n\nShutting Down\n\n\nBefore shutting down, make sure to save your Scratch project. To shutdown, press \nControl-C\n in the command window.\nThis will close both s2m and Scratch.",
            "title": "Using s2m"
        },
        {
            "location": "/usage/#starting-s2m-on-windows-mac-and-linux",
            "text": "Make sure that your micro:bit is plugged into a USB port on your computer.  Next, open a command or terminal window and type:  s2m  The command window should display something similar to this:   The program begins by announcing s2m's version number and thePython version in use.  Next, s2m attempts to auto detect the communication port the micro:bit is connected to and announces\nthe port found.  It then launches Scratch and you should select the More Blocks tab to view the s2m blocks.   When the connectivity indicator on the Scratch editor turns green, the program is ready to be used.",
            "title": "Starting s2m On Windows, Mac and Linux"
        },
        {
            "location": "/usage/#starting-s2m-on-the-raspberry-pi",
            "text": "Open a terminal window and type:  s2m -r true  See  the previous section  for a description of the console output.",
            "title": "Starting s2m On The Raspberry Pi"
        },
        {
            "location": "/usage/#command-line-options",
            "text": "Some program defaults can be overriden at startup using command line options.   The  BASE_PATH  allows you to override where s2m looks for its files. The standard  BASE_PATH  is the Python path printed when s2m first starts up.  You may also display the BASE_PATH that is currently in use. If you select  s2m -d true  the  BASE_PATH  is shown and then s2m exits.  If the  CLIENT  is set to no_client, Scratch will not automatically launch. This is mainly\nused for debugging.  COMPOR T allows you to manually specify which communications port the micro:bit is connected to.",
            "title": "Command Line Options"
        },
        {
            "location": "/usage/#special-note-for-raspberry-pi-users",
            "text": "You must set the -r option to \"true\" to allow s2m to lauch correctly. See the\n  previous section .  SCRATCH_EXEC  allows you to specify the full path and Scratch executable name if Scratch was not\ninstalled into the standard directory.",
            "title": "Special Note For Raspberry Pi Users"
        },
        {
            "location": "/usage/#shutting-down",
            "text": "Before shutting down, make sure to save your Scratch project. To shutdown, press  Control-C  in the command window.\nThis will close both s2m and Scratch.",
            "title": "Shutting Down"
        },
        {
            "location": "/blocks/",
            "text": "The s2m Blocks\n\n\nThis section describes the custom Scratch blocks added to the More Blocks section\n in the Scratch editor.\n\n\nDisplay\n\n\nThis command block allows you to select and display an image on the micro:bit LED display.\n\n\n\n\nScroll Text\n\n\nThis command block allows you to enter text that will be scrolled across the LED display.\n\n\n\n\nWrite Pixel\n\n\nThis command block allows you to control each individual pixel on the LED display. A pixel is chosen\nby specifying its x or horizontal position, y or vertical position, and its intensity or brightness.\n\n\nAn x value of 0 is the left most column and 4 is the right most.\n\n\nA y value of 0 is top row and 4 is the bottom row.\n\n\nAn intensity value of 0 is the lowest level and 9 is the highest.\n\n\n\n\nClear Display\n\n\nThis command block will immediately turn all LED pixels off.\n\n\n\n\nDigital Write\n\n\nThis command block allows you to set pins 0, 1, or 2 to a value of 0 or 1.\n\n\n\n\nAnalog Write\n\n\nThis command block allows you to set pins 0, 1, or 2 to a value of 0 to 1023.\n\n\n\n\nButton Pressed\n\n\nThese binary reporter blocks report if their associated button is pressed or not. They return a value\nof \"true\" if pressed and \"false\" if not.\n\n\n\n\nTilt\n\n\nThese binary reporter blocks report if the micro:bit board is tilted in a given direction.\nThey return a value of \"true\" if tilted and \"false\" if not.\n\n\nThe micro:bit is held so that the USB connector is at the top in order for the tilt directions to\ntrack correctly.\n\n\n\n\nShaken\n\n\nThis binary reporter block reports if the micro:bit has been shaken. It returns a value of \"true\" if\nit has been, and \"false\" if not.\n\n\n\n\nRead Digital\n\n\nThis reporter block returns the current digital value for pins 0, 1, or 2. Either a value of 0 or\n1 is returned.\n\n\n\n\nRead Analog\n\n\nThis reporter block returns the current analog value for pins 0, 1, or 2. A value between 0 and \n 1024 is returned.\n\n\n\n\nIMPORTANT NOTE: When you press the Red Stop Button in the Scratch Editor, digital and anlog outputs for pins 0, 1, and 2 will be set to 0, and the LED display will be cleared.",
            "title": "The s2m Blocks"
        },
        {
            "location": "/blocks/#the-s2m-blocks",
            "text": "This section describes the custom Scratch blocks added to the More Blocks section\n in the Scratch editor.",
            "title": "The s2m Blocks"
        },
        {
            "location": "/blocks/#display",
            "text": "This command block allows you to select and display an image on the micro:bit LED display.",
            "title": "Display"
        },
        {
            "location": "/blocks/#scroll-text",
            "text": "This command block allows you to enter text that will be scrolled across the LED display.",
            "title": "Scroll Text"
        },
        {
            "location": "/blocks/#write-pixel",
            "text": "This command block allows you to control each individual pixel on the LED display. A pixel is chosen\nby specifying its x or horizontal position, y or vertical position, and its intensity or brightness.  An x value of 0 is the left most column and 4 is the right most.  A y value of 0 is top row and 4 is the bottom row.  An intensity value of 0 is the lowest level and 9 is the highest.",
            "title": "Write Pixel"
        },
        {
            "location": "/blocks/#clear-display",
            "text": "This command block will immediately turn all LED pixels off.",
            "title": "Clear Display"
        },
        {
            "location": "/blocks/#digital-write",
            "text": "This command block allows you to set pins 0, 1, or 2 to a value of 0 or 1.",
            "title": "Digital Write"
        },
        {
            "location": "/blocks/#analog-write",
            "text": "This command block allows you to set pins 0, 1, or 2 to a value of 0 to 1023.",
            "title": "Analog Write"
        },
        {
            "location": "/blocks/#button-pressed",
            "text": "These binary reporter blocks report if their associated button is pressed or not. They return a value\nof \"true\" if pressed and \"false\" if not.",
            "title": "Button Pressed"
        },
        {
            "location": "/blocks/#tilt",
            "text": "These binary reporter blocks report if the micro:bit board is tilted in a given direction.\nThey return a value of \"true\" if tilted and \"false\" if not.  The micro:bit is held so that the USB connector is at the top in order for the tilt directions to\ntrack correctly.",
            "title": "Tilt"
        },
        {
            "location": "/blocks/#shaken",
            "text": "This binary reporter block reports if the micro:bit has been shaken. It returns a value of \"true\" if\nit has been, and \"false\" if not.",
            "title": "Shaken"
        },
        {
            "location": "/blocks/#read-digital",
            "text": "This reporter block returns the current digital value for pins 0, 1, or 2. Either a value of 0 or\n1 is returned.",
            "title": "Read Digital"
        },
        {
            "location": "/blocks/#read-analog",
            "text": "This reporter block returns the current analog value for pins 0, 1, or 2. A value between 0 and \n 1024 is returned.",
            "title": "Read Analog"
        },
        {
            "location": "/blocks/#important-note-when-you-press-the-red-stop-button-in-the-scratch-editor-digital-and-anlog-outputs-for-pins-0-1-and-2-will-be-set-to-0-and-the-led-display-will-be-cleared",
            "text": "",
            "title": "IMPORTANT NOTE: When you press the Red Stop Button in the Scratch Editor, digital and anlog outputs for pins 0, 1, and 2 will be set to 0, and the LED display will be cleared."
        },
        {
            "location": "/s2m/",
            "text": "The \ns2m\n Architecture\n\n\n\n\ns2m consists of 3 major components:\n\n\nAn HTTP Server\n\n\nWhen a Scratch command block is executed, Scratch generates an HTTP message that is\nsent to the \ns2m\n HTTP server. The message identifies the block type and provides any\ndata that the user may have entered into the block's fields. Reporting block\ninformation is formatted by \ns2m\n into HTTP messages and are sent to Scratch and made\navailable to the user.\n\n\nA copy of the Scratch 2.0 HTTP Extension specification is available \nhere\n.\n\n\nProtocol Translator\n\n\nThe micro:bit does not understand HTTP, so the Scratch HTTP messaging must be translated into data\nthat the micro:bit can understand and process. When the micro:bit wants to send reporter data,\nsuch as button presses, it does so using the protocol described by the Python code that was installed\non micro:bit that supports s2m. This protocl then needs to be translated into HTTP messages so that\nScratch can process the data coming from the micro:bit.\n\n\nThe Serial Interface\n\n\ns2m\n communicates with the micro:bit over its serial interface. The s2m serial interface\nwrites data directly to the micro:bit and reads data from the micro:bit.",
            "title": "How s2m Works"
        },
        {
            "location": "/s2m/#the-s2m-architecture",
            "text": "",
            "title": "The s2m Architecture"
        },
        {
            "location": "/s2m/#s2m-consists-of-3-major-components",
            "text": "",
            "title": "s2m consists of 3 major components:"
        },
        {
            "location": "/s2m/#an-http-server",
            "text": "When a Scratch command block is executed, Scratch generates an HTTP message that is\nsent to the  s2m  HTTP server. The message identifies the block type and provides any\ndata that the user may have entered into the block's fields. Reporting block\ninformation is formatted by  s2m  into HTTP messages and are sent to Scratch and made\navailable to the user.  A copy of the Scratch 2.0 HTTP Extension specification is available  here .",
            "title": "An HTTP Server"
        },
        {
            "location": "/s2m/#protocol-translator",
            "text": "The micro:bit does not understand HTTP, so the Scratch HTTP messaging must be translated into data\nthat the micro:bit can understand and process. When the micro:bit wants to send reporter data,\nsuch as button presses, it does so using the protocol described by the Python code that was installed\non micro:bit that supports s2m. This protocl then needs to be translated into HTTP messages so that\nScratch can process the data coming from the micro:bit.",
            "title": "Protocol Translator"
        },
        {
            "location": "/s2m/#the-serial-interface",
            "text": "s2m  communicates with the micro:bit over its serial interface. The s2m serial interface\nwrites data directly to the micro:bit and reads data from the micro:bit.",
            "title": "The Serial Interface"
        }
    ]
}